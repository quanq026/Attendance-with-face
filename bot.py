import discord
from discord.ui import Button, View
from discord.ext import commands
from discord import app_commands
import os
import sys
import asyncio
import logging
from datetime import datetime, timedelta
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import re

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Bot ID v√† TOKEN
CHANNEL_ID = #add ur id channel here   Thay b·∫±ng CHANNEL_ID c·ªßa b·∫°n
TOKEN = "add ur bot token here"         # Thay b·∫±ng TOKEN c·ªßa b·∫°n
# Pagination settings
PAGINATION_LIMIT = 5  # Number of items per page

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DATABASE_DIR = os.path.join(BASE_DIR, 'database')
os.chdir(BASE_DIR)
if not os.path.exists(DATABASE_DIR):
    logger.error(f"Th∆∞ m·ª•c database kh√¥ng t·ªìn t·∫°i t·∫°i: {DATABASE_DIR}")
    sys.exit(1)
sys.path.append(BASE_DIR)

try:
    from utils import (
        get_all_employees,
        get_employee_name,
        get_employee_dob,
        get_attendance_summary,
        has_attended_on_date,
        load_logs_to_dataframe
    )
except ImportError as error:
    logger.error(f"L·ªói import utils: {error}")
    sys.exit(1)

# H√†m r√∫t g·ªçn t√™n
def shorten_name(name: str, max_length: int = 20) -> str:
    name = name.strip()
    if len(name) <= max_length:
        return name
    parts = name.split()
    if len(parts) == 1:
        return name
    initials = [word[0].upper() + '.' for word in parts[:-1]]
    return ''.join(initials) + parts[-1]

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# File watcher
class NewEmployeeFileHandler(FileSystemEventHandler):
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.last_modified_times = {}
        self.processing = False

    async def process_file_change(self, filepath):
        if self.processing:
            return
        self.processing = True
        try:
            mtime = os.path.getmtime(filepath)
            if filepath in self.last_modified_times and self.last_modified_times[filepath] == mtime:
                return
            self.last_modified_times[filepath] = mtime

            channel = self.bot.get_channel(CHANNEL_ID)
            if not channel:
                logger.error("Kh√¥ng t√¨m th·∫•y k√™nh Discord")
                return

            with open(filepath, "r", encoding="utf-8") as f:
                names = [line.strip() for line in f if line.strip()]

            if names:
                message = f"üëã Ch√†o m·ª´ng nh√¢n vi√™n m·ªõi: {', '.join(names)}"
                await channel.send(message)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o: {message}")
                open(filepath, 'w', encoding='utf-8').close()
        except Exception as error:
            logger.error(f"L·ªói x·ª≠ l√Ω file nh√¢n vi√™n m·ªõi: {error}")
        finally:
            self.processing = False

    def on_modified(self, event):
        if event.is_directory or os.path.basename(event.src_path) != "new_employees.txt":
            return
        asyncio.run_coroutine_threadsafe(self.process_file_change(event.src_path), self.bot.loop)

async def start_file_watcher():
    new_file = os.path.join(DATABASE_DIR, "new_employees.txt")
    if not os.path.exists(new_file):
        open(new_file, 'w', encoding='utf-8').close()
    observer = Observer()
    handler = NewEmployeeFileHandler(bot)
    observer.schedule(handler, DATABASE_DIR, recursive=False)
    observer.start()
    logger.info(f"ƒêang theo d√µi th∆∞ m·ª•c: {DATABASE_DIR}")
    try:
        while True:
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        observer.stop()
        observer.join()
        
class PaginationButtons(View):
    def __init__(self, page: int, total_items: int, command: str, interaction: discord.Interaction):
        super().__init__()
        self.page = page
        self.total_items = total_items
        self.command = command
        self.interaction = interaction

    @property
    def total_pages(self):
        return (self.total_items + PAGINATION_LIMIT - 1) // PAGINATION_LIMIT  # Calculate total pages

    @discord.ui.button(label="‚óÄÔ∏è Previous", style=discord.ButtonStyle.primary)
    async def previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page > 1:
            self.page -= 1
            await interaction.response.defer()
            await self.update_embed()

    @discord.ui.button(label="Next ‚ñ∂Ô∏è", style=discord.ButtonStyle.primary)
    async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page < self.total_pages:
            self.page += 1
            await interaction.response.defer()
            await self.update_embed()

    async def update_embed(self):
        employees = get_all_employees()
        start = (self.page - 1) * PAGINATION_LIMIT
        end = start + PAGINATION_LIMIT
        page_employees = employees[start:end]

        embed = discord.Embed(
            title=f"üìã Danh s√°ch nh√¢n vi√™n (Page {self.page}/{self.total_pages})",
            description="\n".join([f"- ID: {eid} - {get_employee_name(eid)}" for eid in page_employees]),
            color=discord.Color.blue()
        )
        await self.interaction.edit_original_response(embed=embed, view=self)


# === Slash commands ===
@bot.event
async def on_ready():
    logger.info(f"Bot ƒë√£ s·∫µn s√†ng: {bot.user}")
    try:
        synced = await bot.tree.sync()
        logger.info(f"ƒê√£ ƒë·ªìng b·ªô {len(synced)} slash commands")
        bot.loop.create_task(check_birthdays())
        bot.loop.create_task(start_file_watcher())
    except Exception as error:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông bot: {error}")


@bot.tree.command(name="employees", description="Xem danh s√°ch nh√¢n vi√™n ƒë√£ ƒëƒÉng k√Ω.")
async def list_employees(interaction: discord.Interaction):
    employees = get_all_employees()
    if not employees:
        await interaction.response.send_message("Ch∆∞a c√≥ nh√¢n vi√™n n√†o.")
        return

    # Pagination View for employee list
    class EmployeePagination(View):
        def __init__(self, page: int, total_items: int, interaction: discord.Interaction):
            super().__init__()
            self.page = page
            self.total_items = total_items
            self.interaction = interaction

        @property
        def total_pages(self):
            return (self.total_items + PAGINATION_LIMIT - 1) // PAGINATION_LIMIT

        @discord.ui.button(label="‚óÄÔ∏è Previous", style=discord.ButtonStyle.primary)
        async def previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):
            if self.page > 1:
                self.page -= 1
                await interaction.response.defer()
                await self.update_embed()

        @discord.ui.button(label="Next ‚ñ∂Ô∏è", style=discord.ButtonStyle.primary)
        async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
            if self.page < self.total_pages:
                self.page += 1
                await interaction.response.defer()
                await self.update_embed()

        async def update_embed(self):
            start = (self.page - 1) * PAGINATION_LIMIT
            end = start + PAGINATION_LIMIT
            page_employees = employees[start:end]

            embed = discord.Embed(
                title=f"üìã Danh s√°ch nh√¢n vi√™n (Page {self.page}/{self.total_pages})",
                description="\n".join([f"- ID: {eid} - {get_employee_name(eid)}" for eid in page_employees]),
                color=discord.Color.blue()
            )
            await self.interaction.edit_original_response(embed=embed, view=self)

    # Send first page of employee list
    view = EmployeePagination(page=1, total_items=len(employees), interaction=interaction)
    embed = discord.Embed(
        title="üìã Danh s√°ch nh√¢n vi√™n (Page 1)",
        description="\n".join([f"- ID: {eid} - {get_employee_name(eid)}" for eid in employees[:PAGINATION_LIMIT]]),
        color=discord.Color.blue()
    )
    await interaction.response.send_message(embed=embed, view=view)



@bot.tree.command(name="list_dob", description="Xem danh s√°ch nh√¢n vi√™n k√®m ng√†y sinh.")
async def list_dob(interaction: discord.Interaction):
    emps = get_all_employees()
    if not emps:
        await interaction.response.send_message("Ch∆∞a c√≥ nh√¢n vi√™n n√†o.")
        return

    # Pagination class for list_dob
    class DobPagination(View):
        def __init__(self, page: int, total_items: int, interaction: discord.Interaction):
            super().__init__()
            self.page = page
            self.total_items = total_items
            self.interaction = interaction

        @property
        def total_pages(self):
            return (self.total_items + PAGINATION_LIMIT - 1) // PAGINATION_LIMIT

        @discord.ui.button(label="‚óÄÔ∏è Previous", style=discord.ButtonStyle.primary)
        async def previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):
            if self.page > 1:
                self.page -= 1
                await interaction.response.defer()
                await self.update_embed()

        @discord.ui.button(label="Next ‚ñ∂Ô∏è", style=discord.ButtonStyle.primary)
        async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
            if self.page < self.total_pages:
                self.page += 1
                await interaction.response.defer()
                await self.update_embed()

        async def update_embed(self):
            start = (self.page - 1) * PAGINATION_LIMIT
            end = start + PAGINATION_LIMIT
            page_employees = emps[start:end]

            embed = discord.Embed(
                title=f"üéÇ Danh s√°ch ng√†y sinh (Page {self.page}/{self.total_pages})",
                description="\n".join([
                    f"- ID: {eid} - {get_employee_name(eid)}: {get_employee_dob(eid) or 'Ch∆∞a c√≥'}"
                    for eid in page_employees
                ]),
                color=discord.Color.gold()
            )
            await self.interaction.edit_original_response(embed=embed, view=self)

    # Send the first page of employee birthdays
    view = DobPagination(page=1, total_items=len(emps), interaction=interaction)
    embed = discord.Embed(
        title="üéÇ Danh s√°ch ng√†y sinh (Page 1)",
        description="\n".join([
            f"- ID: {eid} - {get_employee_name(eid)}: {get_employee_dob(eid) or 'Ch∆∞a c√≥'}"
            for eid in emps[:PAGINATION_LIMIT]
        ]),
        color=discord.Color.gold()
    )
    await interaction.response.send_message(embed=embed, view=view)


@bot.tree.command(name="attendance", description="B√°o c√°o ch·∫•m c√¥ng h√¥m nay.")
async def attendance(interaction: discord.Interaction):
    summary = get_attendance_summary()
    not_done = [get_employee_name(e) for e in summary['not_attended_list']]
    embed = discord.Embed(
        title="üìÜ B√°o c√°o ch·∫•m c√¥ng h√¥m nay",
        description=f"‚úÖ ƒê√£ ch·∫•m: {summary['attended_count']}/{summary['total_employees']}",
        color=discord.Color.green()
    )
    embed.add_field(name="‚ùå Ch∆∞a ch·∫•m", value=', '.join(not_done) or "Kh√¥ng", inline=False)
    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="check", description="Ki·ªÉm tra ch·∫•m c√¥ng theo ID ho·∫∑c t√™n.")
@app_commands.describe(identifier="ID (5 s·ªë) ho·∫∑c t√™n", date="Ng√†y (dd/mm) ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ ki·ªÉm tra h√¥m nay")
async def check(interaction: discord.Interaction, identifier: str, date: str = None):
    iden = identifier.strip()
    today = datetime.now().date() if date is None else datetime.strptime(date, "%d/%m").date().replace(year=datetime.now().year)
    
    df = load_logs_to_dataframe()
    embed = discord.Embed(
        title=f"üìç K·∫øt qu·∫£ ki·ªÉm tra ch·∫•m c√¥ng - {today.strftime('%d/%m/%Y')}",  # Add today's date to the title
        color=discord.Color.teal()
    )

    # Initialize description as an empty string to avoid NoneType error
    embed.description = ""

    if iden.isdigit() and len(iden) == 5:
        # Check by ID
        name = get_employee_name(iden)
        if not name:
            await interaction.response.send_message(f"Kh√¥ng t√¨m th·∫•y ID {iden}.")
            return
        rec = df[(df['ID'].str.strip() == iden) & (df['Th·ªùi gian'].dt.date == today)]
        dob = get_employee_dob(iden) or "Ch∆∞a c√≥"
        status = f"‚úÖ {name} ({iden}) ƒë√£ ch·∫•m c√¥ng l√∫c {rec.iloc[0]['Th·ªùi gian'].strftime('%H:%M:%S')}" if not rec.empty else f"‚ùå {name} ({iden}) ch∆∞a ch·∫•m c√¥ng."
        embed.description = f"{status}\nüéÇ Ng√†y sinh: {dob}"
        await interaction.response.send_message(embed=embed)
        return

    # Check by name
    found = False
    for eid in get_all_employees():
        name = get_employee_name(eid)
        if iden.lower() in name.lower():
            rec = df[(df['ID'].str.strip() == eid) & (df['Th·ªùi gian'].dt.date == today)]
            dob = get_employee_dob(eid) or "Ch∆∞a c√≥"
            status = f"‚úÖ {name} ({eid}) ƒë√£ ch·∫•m c√¥ng l√∫c {rec.iloc[0]['Th·ªùi gian'].strftime('%H:%M:%S')}" if not rec.empty else f"‚ùå {name} ({eid}) ch∆∞a ch·∫•m c√¥ng."
            embed.description += f"\n\n{status}\nüéÇ Ng√†y sinh: {dob}"
            found = True

    if not found:
        await interaction.response.send_message(f"Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o tr√πng v·ªõi '{identifier}' v√†o ng√†y {today.strftime('%d/%m/%Y')}.")
    else:
        await interaction.response.send_message(embed=embed)



@bot.tree.command(name="attendance_table", description="B·∫£ng th·ªëng k√™ ch·∫•m c√¥ng.")
@app_commands.describe(param="S·ªë ng√†y (e.g.7) ho·∫∑c ng√†y c·ª• th·ªÉ (dd/mm)")
async def attendance_table(interaction: discord.Interaction, param: str = "7"):
    employees = get_all_employees()
    if not employees:
        return await interaction.response.send_message("Ch∆∞a c√≥ nh√¢n vi√™n n√†o.")

    # X·ª≠ l√Ω ng√†y
    today = datetime.now().date()
    year = today.year
    if param.isdigit():
        cnt = int(param)
        dates = [today - timedelta(days=i) for i in range(cnt-1, -1, -1)]
    elif re.match(r"^\d{2}/\d{2}$", param):
        dates = [datetime.strptime(f"{param}/{year}", "%d/%m/%Y").date()]
    else:
        return await interaction.response.send_message("Tham s·ªë kh√¥ng h·ª£p l·ªá.")

    # Pagination class
    class AttendanceTablePagination(View):
        def __init__(self, page: int, total_items: int, interaction: discord.Interaction):
            super().__init__()
            self.page = page
            self.total_items = total_items
            self.interaction = interaction

        @property
        def total_pages(self):
            return (self.total_items + PAGINATION_LIMIT - 1) // PAGINATION_LIMIT

        @discord.ui.button(label="‚óÄÔ∏è Previous", style=discord.ButtonStyle.primary)
        async def previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):
            if self.page > 1:
                self.page -= 1
                await interaction.response.defer()
                await self.update_embed()

        @discord.ui.button(label="Next ‚ñ∂Ô∏è", style=discord.ButtonStyle.primary)
        async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
            if self.page < self.total_pages:
                self.page += 1
                await interaction.response.defer()
                await self.update_embed()

        async def update_embed(self):
            start = (self.page - 1) * PAGINATION_LIMIT
            end = start + PAGINATION_LIMIT
            employees_page = employees[start:end]

            embed = discord.Embed(
                title=f"üìä Th·ªëng k√™ ch·∫•m c√¥ng (Page {self.page}/{self.total_pages})",
                description=f"Th·ªëng k√™ t·ª´ `{dates[0].strftime('%d/%m/%Y')}` ƒë·∫øn `{dates[-1].strftime('%d/%m/%Y')}`",
                colour=discord.Colour.blurple(),
                timestamp=datetime.now()
            )

            # Add headers for the dates
            header_line = ' ‚Ä¢ '.join(f"`{d.strftime('%d-%m')}`" for d in dates)
            embed.add_field(name="üìÖ Ng√†y", value=header_line, inline=False)

            # Add employee status for each page
            for eid in employees_page:
                title = f"{shorten_name(get_employee_name(eid))} (ID: {eid})"
                cells = [f"`{d.strftime('%d')}|{'‚úÖ' if has_attended_on_date(eid, d.strftime('%d/%m/%Y')) else '‚ùå'}`" for d in dates]
                cell_line = '  '.join(cells)
                embed.add_field(name=title, value=cell_line, inline=False)

            # Footer text
            footer_text = "‚úÖ = C√≥ m·∫∑t   ‚ùå = V·∫Øng m·∫∑t"
            embed.set_footer(text=f"{footer_text} | Trang {view.page}/{view.total_pages}")


            await self.interaction.edit_original_response(embed=embed, view=self)

    # Send the first page of the attendance table
    view = AttendanceTablePagination(page=1, total_items=len(employees), interaction=interaction)
    embed = discord.Embed(
        title="üìä Th·ªëng k√™ ch·∫•m c√¥ng",
        description=f"Th·ªëng k√™ t·ª´ `{dates[0].strftime('%d/%m/%Y')}` ƒë·∫øn `{dates[-1].strftime('%d/%m/%Y')}`",
        colour=discord.Colour.blurple(),
        timestamp=datetime.now()
    )
    header_line = ' ‚Ä¢ '.join(f"`{d.strftime('%d-%m')}`" for d in dates)
    embed.add_field(name="üìÖ Ng√†y", value=header_line, inline=False)

    # Add employees for the first page
    for eid in employees[:PAGINATION_LIMIT]:
        title = f"{shorten_name(get_employee_name(eid))} (ID: {eid})"
        cells = [f"`{d.strftime('%d')}|{'‚úÖ' if has_attended_on_date(eid, d.strftime('%d/%m/%Y')) else '‚ùå'}`" for d in dates]
        cell_line = '  '.join(cells)
        embed.add_field(name=title, value=cell_line, inline=False)

    footer_text = "‚úÖ = C√≥ m·∫∑t   ‚ùå = V·∫Øng m·∫∑t"
    embed.set_footer(text=f"{footer_text} | Trang {view.page}/{view.total_pages}")



    await interaction.response.send_message(embed=embed, view=view)


@bot.tree.command(name="helppls", description="Hi·ªÉn th·ªã danh s√°ch l·ªánh.")
async def helppls(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìå Danh s√°ch l·ªánh slash",
        description=(
            "üîπ `/employees` ‚Äî Danh s√°ch nh√¢n vi√™n.\n"
            "üîπ `/list_dob` ‚Äî Danh s√°ch ng√†y sinh.\n"
            "üîπ `/attendance` ‚Äî B√°o c√°o h√¥m nay.\n"
            "üîπ `/check` <ID | t√™n> ‚Äî Ki·ªÉm tra ch·∫•m c√¥ng.\n"
            "üîπ `/attendance_table` <S·ªë ng√†y | dd/mm> ‚Äî B·∫£ng ch·∫•m c√¥ng.\n"
            "üîπ `/helppls` ‚Äî Hi·ªÉn th·ªã danh s√°ch l·ªánh."
        ),
        color=discord.Color.purple()
    )
    await interaction.response.send_message(embed=embed)

async def check_birthdays():
    while True:
        today_str = datetime.now().strftime("%d/%m")
        bdays = [f"{get_employee_name(e)} ({e})" for e in get_all_employees() if (dob := get_employee_dob(e)) and dob[:5] == today_str]
        if bdays:
            ch = bot.get_channel(CHANNEL_ID)
            await ch.send(f"üéÇ Ch√∫c m·ª´ng sinh nh·∫≠t: {', '.join(bdays)}!")
        await asyncio.sleep(86400)

async def main():
    try:
        await bot.start(TOKEN)
    except Exception as error:
        logger.error(f"Bot kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c: {error}")
        await bot.close()

if __name__ == "__main__":
    asyncio.run(main())
